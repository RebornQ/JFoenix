buildscript {
    // https://github.com/JavaFX-Starter/JavaFX-Package-Sample/blob/java17/build.gradle
    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/jcenter" }
        mavenCentral()
    }

    allprojects {
        repositories {
            mavenLocal()
            maven { url "https://maven.aliyun.com/repository/central" }
            maven { url "https://maven.aliyun.com/repository/jcenter" }
            mavenCentral()
        }
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.7.3' apply false
    id 'com.github.ben-manes.versions' version '0.15.0' apply false
    id 'me.tatarka.retrolambda' version '3.7.0' apply false
    id 'com.github.hierynomus.license' version '0.14.0' apply false
    id 'net.nemerosa.versioning' version '2.6.1' apply false
    id 'org.sonarqube' version '2.5'
}

subprojects {
    afterEvaluate {
        apply plugin: 'java'
        apply plugin: 'com.github.ben-manes.versions'
        apply plugin: 'net.nemerosa.versioning'

        // end::autoModuleName[]
        repositories {
            jcenter()
            mavenCentral()
            maven { url 'http://sevntu-checkstyle.github.com/sevntu.checkstyle/maven2' }
        }

        sourceCompatibility = 1.9
        targetCompatibility = 1.9

        tasks.withType(JavaCompile) {
            options.incremental = true
        }

        // tag::autoModuleName[]
        jar {
            inputs.property("moduleName", moduleName)
            manifest {
                attributes('Automatic-Module-Name': moduleName)
            }
        }

        if (JavaVersion.current().isJava8Compatible()) {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }

        apply from: rootProject.file('gradle/code-coverage.gradle')
        apply from: rootProject.file('gradle/checkstyle.gradle')
        apply from: rootProject.file('gradle/findbugs.gradle')
        apply from: rootProject.file('gradle/javafx.gradle')

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs += [
                    '--module-path', classpath.asPath,
                    // For various usages of TraversalEngine
                    "--add-exports=javafx.graphics/com.sun.javafx.scene=com.jfoenix",
                    "--add-exports=javafx.graphics/com.sun.javafx.scene.text=com.jfoenix",
                    "--add-exports=javafx.graphics/com.sun.javafx.geom=com.jfoenix",
                    "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
                    "--add-exports=javafx.graphics/com.sun.javafx.util=com.jfoenix",
                    "--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=com.jfoenix",

                    // For various behaviors across controls
                    "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
                    "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
                    "--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=com.jfoenix",
                    "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
                    // For ReadOnlyUnbackedObservableList across files
//                    "--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
                    // For InputMap used in behavior classes
//                    "--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=ALL-UNNAMED",
                    // For EventHandlerManager across files
                    "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix",
                    "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix",
                    // For MappingChange, NonIterableChange across files
//                    "--add-exports=javafx.base/com.sun.javafx.collections=ALL-UNNAMED",
                    // For VersionInfo in VersionChecker
//                    "--add-exports=javafx.base/com.sun.javafx.runtime=ALL-UNNAMED",
                    // For WebPage in SVGLoader
//                    "--add-exports=javafx.web/com.sun.webkit=ALL-UNNAMED"
//                    "--add-modules=java.se.ee"
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'junit',
                    '--add-reads', "$moduleName=junit",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'ALL-MODULE-PATH',
                    '--add-reads', "$moduleName=junit",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }
    }
}
